export const treeData = {
  rootNode: {
    id: "node_0",
    name: "translation_unit",
    children: [
      {
        id: "node_1",
        name: "function_definition",
        children: [
          { id: "node_2", name: "primitive_type", children: [] },
          {
            id: "node_3",
            name: "function_declarator",
            children: [
              { id: "node_4", name: "identifier", children: [] },
              {
                id: "node_5",
                name: "parameter_list",
                children: [
                  {
                    id: "node_6",
                    name: "parameter_declaration",
                    children: [
                      { id: "node_7", name: "primitive_type", children: [] },
                      {
                        id: "node_8",
                        name: "array_declarator",
                        children: [
                          { id: "node_9", name: "identifier", children: [] },
                        ],
                      },
                    ],
                  },
                  {
                    id: "node_10",
                    name: "parameter_declaration",
                    children: [
                      { id: "node_11", name: "primitive_type", children: [] },
                      { id: "node_12", name: "identifier", children: [] },
                    ],
                  },
                  {
                    id: "node_13",
                    name: "parameter_declaration",
                    children: [
                      { id: "node_14", name: "primitive_type", children: [] },
                      { id: "node_15", name: "identifier", children: [] },
                    ],
                  },
                ],
              },
            ],
          },
          {
            id: "node_16",
            name: "compound_statement",
            children: [
              {
                id: "node_17",
                name: "if_statement",
                children: [
                  {
                    id: "node_18",
                    name: "parenthesized_expression",
                    children: [
                      {
                        id: "node_19",
                        name: "binary_expression",
                        children: [
                          { id: "node_20", name: "identifier", children: [] },
                          { id: "node_21", name: "identifier", children: [] },
                        ],
                      },
                    ],
                  },
                  {
                    id: "node_22",
                    name: "compound_statement",
                    children: [
                      { id: "node_23", name: "comment", children: [] },
                      {
                        id: "node_24",
                        name: "declaration",
                        children: [
                          {
                            id: "node_25",
                            name: "primitive_type",
                            children: [],
                          },
                          {
                            id: "node_26",
                            name: "init_declarator",
                            children: [
                              {
                                id: "node_27",
                                name: "identifier",
                                children: [],
                              },
                              {
                                id: "node_28",
                                name: "binary_expression",
                                children: [
                                  {
                                    id: "node_29",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_30",
                                    name: "binary_expression",
                                    children: [
                                      {
                                        id: "node_31",
                                        name: "parenthesized_expression",
                                        children: [
                                          {
                                            id: "node_32",
                                            name: "binary_expression",
                                            children: [
                                              {
                                                id: "node_33",
                                                name: "identifier",
                                                children: [],
                                              },
                                              {
                                                id: "node_34",
                                                name: "identifier",
                                                children: [],
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        id: "node_35",
                                        name: "number_literal",
                                        children: [],
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      { id: "node_36", name: "comment", children: [] },
                      {
                        id: "node_37",
                        name: "expression_statement",
                        children: [
                          {
                            id: "node_38",
                            name: "call_expression",
                            children: [
                              {
                                id: "node_39",
                                name: "identifier",
                                children: [],
                              },
                              {
                                id: "node_40",
                                name: "argument_list",
                                children: [
                                  {
                                    id: "node_41",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_42",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_43",
                                    name: "identifier",
                                    children: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        id: "node_44",
                        name: "expression_statement",
                        children: [
                          {
                            id: "node_45",
                            name: "call_expression",
                            children: [
                              {
                                id: "node_46",
                                name: "identifier",
                                children: [],
                              },
                              {
                                id: "node_47",
                                name: "argument_list",
                                children: [
                                  {
                                    id: "node_48",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_49",
                                    name: "binary_expression",
                                    children: [
                                      {
                                        id: "node_50",
                                        name: "identifier",
                                        children: [],
                                      },
                                      {
                                        id: "node_51",
                                        name: "number_literal",
                                        children: [],
                                      },
                                    ],
                                  },
                                  {
                                    id: "node_52",
                                    name: "identifier",
                                    children: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      { id: "node_53", name: "comment", children: [] },
                      {
                        id: "node_54",
                        name: "expression_statement",
                        children: [
                          {
                            id: "node_55",
                            name: "call_expression",
                            children: [
                              {
                                id: "node_56",
                                name: "identifier",
                                children: [],
                              },
                              {
                                id: "node_57",
                                name: "argument_list",
                                children: [
                                  {
                                    id: "node_58",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_59",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_60",
                                    name: "identifier",
                                    children: [],
                                  },
                                  {
                                    id: "node_61",
                                    name: "identifier",
                                    children: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  allNodes: {
    node_0: {
      id: "node_0",
      type: "translation_unit",
      startPosition: { row: 1, column: 0 },
      endPosition: { row: 16, column: 0 },
      startIndex: 2,
      endIndex: 360,
      text: "void mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }\n}\n\n",
    },
    node_1: {
      id: "node_1",
      type: "function_definition",
      startPosition: { row: 1, column: 0 },
      endPosition: { row: 14, column: 1 },
      startIndex: 2,
      endIndex: 358,
      text: "void mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }\n}",
    },
    node_2: {
      id: "node_2",
      type: "primitive_type",
      startPosition: { row: 1, column: 0 },
      endPosition: { row: 1, column: 4 },
      startIndex: 2,
      endIndex: 6,
      text: "void",
    },
    node_3: {
      id: "node_3",
      type: "function_declarator",
      startPosition: { row: 1, column: 5 },
      endPosition: { row: 1, column: 46 },
      startIndex: 7,
      endIndex: 48,
      text: "mergeSort(int arr[], int left, int right)",
    },
    node_4: {
      id: "node_4",
      type: "identifier",
      startPosition: { row: 1, column: 5 },
      endPosition: { row: 1, column: 14 },
      startIndex: 7,
      endIndex: 16,
      text: "mergeSort",
    },
    node_5: {
      id: "node_5",
      type: "parameter_list",
      startPosition: { row: 1, column: 14 },
      endPosition: { row: 1, column: 46 },
      startIndex: 16,
      endIndex: 48,
      text: "(int arr[], int left, int right)",
    },
    node_6: {
      id: "node_6",
      type: "parameter_declaration",
      startPosition: { row: 1, column: 15 },
      endPosition: { row: 1, column: 24 },
      startIndex: 17,
      endIndex: 26,
      text: "int arr[]",
    },
    node_7: {
      id: "node_7",
      type: "primitive_type",
      startPosition: { row: 1, column: 15 },
      endPosition: { row: 1, column: 18 },
      startIndex: 17,
      endIndex: 20,
      text: "int",
    },
    node_8: {
      id: "node_8",
      type: "array_declarator",
      startPosition: { row: 1, column: 19 },
      endPosition: { row: 1, column: 24 },
      startIndex: 21,
      endIndex: 26,
      text: "arr[]",
    },
    node_9: {
      id: "node_9",
      type: "identifier",
      startPosition: { row: 1, column: 19 },
      endPosition: { row: 1, column: 22 },
      startIndex: 21,
      endIndex: 24,
      text: "arr",
    },
    node_10: {
      id: "node_10",
      type: "parameter_declaration",
      startPosition: { row: 1, column: 26 },
      endPosition: { row: 1, column: 34 },
      startIndex: 28,
      endIndex: 36,
      text: "int left",
    },
    node_11: {
      id: "node_11",
      type: "primitive_type",
      startPosition: { row: 1, column: 26 },
      endPosition: { row: 1, column: 29 },
      startIndex: 28,
      endIndex: 31,
      text: "int",
    },
    node_12: {
      id: "node_12",
      type: "identifier",
      startPosition: { row: 1, column: 30 },
      endPosition: { row: 1, column: 34 },
      startIndex: 32,
      endIndex: 36,
      text: "left",
    },
    node_13: {
      id: "node_13",
      type: "parameter_declaration",
      startPosition: { row: 1, column: 36 },
      endPosition: { row: 1, column: 45 },
      startIndex: 38,
      endIndex: 47,
      text: "int right",
    },
    node_14: {
      id: "node_14",
      type: "primitive_type",
      startPosition: { row: 1, column: 36 },
      endPosition: { row: 1, column: 39 },
      startIndex: 38,
      endIndex: 41,
      text: "int",
    },
    node_15: {
      id: "node_15",
      type: "identifier",
      startPosition: { row: 1, column: 40 },
      endPosition: { row: 1, column: 45 },
      startIndex: 42,
      endIndex: 47,
      text: "right",
    },
    node_16: {
      id: "node_16",
      type: "compound_statement",
      startPosition: { row: 1, column: 47 },
      endPosition: { row: 14, column: 1 },
      startIndex: 49,
      endIndex: 358,
      text: "{\n    if (left < right) {\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }\n}",
    },
    node_17: {
      id: "node_17",
      type: "if_statement",
      startPosition: { row: 2, column: 4 },
      endPosition: { row: 13, column: 5 },
      startIndex: 55,
      endIndex: 356,
      text: "if (left < right) {\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }",
    },
    node_18: {
      id: "node_18",
      type: "parenthesized_expression",
      startPosition: { row: 2, column: 7 },
      endPosition: { row: 2, column: 21 },
      startIndex: 58,
      endIndex: 72,
      text: "(left < right)",
    },
    node_19: {
      id: "node_19",
      type: "binary_expression",
      startPosition: { row: 2, column: 8 },
      endPosition: { row: 2, column: 20 },
      startIndex: 59,
      endIndex: 71,
      text: "left < right",
    },
    node_20: {
      id: "node_20",
      type: "identifier",
      startPosition: { row: 2, column: 8 },
      endPosition: { row: 2, column: 12 },
      startIndex: 59,
      endIndex: 63,
      text: "left",
    },
    node_21: {
      id: "node_21",
      type: "identifier",
      startPosition: { row: 2, column: 15 },
      endPosition: { row: 2, column: 20 },
      startIndex: 66,
      endIndex: 71,
      text: "right",
    },
    node_22: {
      id: "node_22",
      type: "compound_statement",
      startPosition: { row: 2, column: 22 },
      endPosition: { row: 13, column: 5 },
      startIndex: 73,
      endIndex: 356,
      text: "{\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }",
    },
    node_23: {
      id: "node_23",
      type: "comment",
      startPosition: { row: 4, column: 8 },
      endPosition: { row: 4, column: 33 },
      startIndex: 90,
      endIndex: 115,
      text: "// Calculate the midpoint",
    },
    node_24: {
      id: "node_24",
      type: "declaration",
      startPosition: { row: 5, column: 8 },
      endPosition: { row: 5, column: 44 },
      startIndex: 124,
      endIndex: 160,
      text: "int mid = left + (right - left) / 2;",
    },
    node_25: {
      id: "node_25",
      type: "primitive_type",
      startPosition: { row: 5, column: 8 },
      endPosition: { row: 5, column: 11 },
      startIndex: 124,
      endIndex: 127,
      text: "int",
    },
    node_26: {
      id: "node_26",
      type: "init_declarator",
      startPosition: { row: 5, column: 12 },
      endPosition: { row: 5, column: 43 },
      startIndex: 128,
      endIndex: 159,
      text: "mid = left + (right - left) / 2",
    },
    node_27: {
      id: "node_27",
      type: "identifier",
      startPosition: { row: 5, column: 12 },
      endPosition: { row: 5, column: 15 },
      startIndex: 128,
      endIndex: 131,
      text: "mid",
    },
    node_28: {
      id: "node_28",
      type: "binary_expression",
      startPosition: { row: 5, column: 18 },
      endPosition: { row: 5, column: 43 },
      startIndex: 134,
      endIndex: 159,
      text: "left + (right - left) / 2",
    },
    node_29: {
      id: "node_29",
      type: "identifier",
      startPosition: { row: 5, column: 18 },
      endPosition: { row: 5, column: 22 },
      startIndex: 134,
      endIndex: 138,
      text: "left",
    },
    node_30: {
      id: "node_30",
      type: "binary_expression",
      startPosition: { row: 5, column: 25 },
      endPosition: { row: 5, column: 43 },
      startIndex: 141,
      endIndex: 159,
      text: "(right - left) / 2",
    },
    node_31: {
      id: "node_31",
      type: "parenthesized_expression",
      startPosition: { row: 5, column: 25 },
      endPosition: { row: 5, column: 39 },
      startIndex: 141,
      endIndex: 155,
      text: "(right - left)",
    },
    node_32: {
      id: "node_32",
      type: "binary_expression",
      startPosition: { row: 5, column: 26 },
      endPosition: { row: 5, column: 38 },
      startIndex: 142,
      endIndex: 154,
      text: "right - left",
    },
    node_33: {
      id: "node_33",
      type: "identifier",
      startPosition: { row: 5, column: 26 },
      endPosition: { row: 5, column: 31 },
      startIndex: 142,
      endIndex: 147,
      text: "right",
    },
    node_34: {
      id: "node_34",
      type: "identifier",
      startPosition: { row: 5, column: 34 },
      endPosition: { row: 5, column: 38 },
      startIndex: 150,
      endIndex: 154,
      text: "left",
    },
    node_35: {
      id: "node_35",
      type: "number_literal",
      startPosition: { row: 5, column: 42 },
      endPosition: { row: 5, column: 43 },
      startIndex: 158,
      endIndex: 159,
      text: "2",
    },
    node_36: {
      id: "node_36",
      type: "comment",
      startPosition: { row: 7, column: 8 },
      endPosition: { row: 7, column: 39 },
      startIndex: 170,
      endIndex: 201,
      text: "// Sort first and second halves",
    },
    node_37: {
      id: "node_37",
      type: "expression_statement",
      startPosition: { row: 8, column: 8 },
      endPosition: { row: 8, column: 34 },
      startIndex: 210,
      endIndex: 236,
      text: "mergeSort(arr, left, mid);",
    },
    node_38: {
      id: "node_38",
      type: "call_expression",
      startPosition: { row: 8, column: 8 },
      endPosition: { row: 8, column: 33 },
      startIndex: 210,
      endIndex: 235,
      text: "mergeSort(arr, left, mid)",
    },
    node_39: {
      id: "node_39",
      type: "identifier",
      startPosition: { row: 8, column: 8 },
      endPosition: { row: 8, column: 17 },
      startIndex: 210,
      endIndex: 219,
      text: "mergeSort",
    },
    node_40: {
      id: "node_40",
      type: "argument_list",
      startPosition: { row: 8, column: 17 },
      endPosition: { row: 8, column: 33 },
      startIndex: 219,
      endIndex: 235,
      text: "(arr, left, mid)",
    },
    node_41: {
      id: "node_41",
      type: "identifier",
      startPosition: { row: 8, column: 18 },
      endPosition: { row: 8, column: 21 },
      startIndex: 220,
      endIndex: 223,
      text: "arr",
    },
    node_42: {
      id: "node_42",
      type: "identifier",
      startPosition: { row: 8, column: 23 },
      endPosition: { row: 8, column: 27 },
      startIndex: 225,
      endIndex: 229,
      text: "left",
    },
    node_43: {
      id: "node_43",
      type: "identifier",
      startPosition: { row: 8, column: 29 },
      endPosition: { row: 8, column: 32 },
      startIndex: 231,
      endIndex: 234,
      text: "mid",
    },
    node_44: {
      id: "node_44",
      type: "expression_statement",
      startPosition: { row: 9, column: 8 },
      endPosition: { row: 9, column: 39 },
      startIndex: 245,
      endIndex: 276,
      text: "mergeSort(arr, mid + 1, right);",
    },
    node_45: {
      id: "node_45",
      type: "call_expression",
      startPosition: { row: 9, column: 8 },
      endPosition: { row: 9, column: 38 },
      startIndex: 245,
      endIndex: 275,
      text: "mergeSort(arr, mid + 1, right)",
    },
    node_46: {
      id: "node_46",
      type: "identifier",
      startPosition: { row: 9, column: 8 },
      endPosition: { row: 9, column: 17 },
      startIndex: 245,
      endIndex: 254,
      text: "mergeSort",
    },
    node_47: {
      id: "node_47",
      type: "argument_list",
      startPosition: { row: 9, column: 17 },
      endPosition: { row: 9, column: 38 },
      startIndex: 254,
      endIndex: 275,
      text: "(arr, mid + 1, right)",
    },
    node_48: {
      id: "node_48",
      type: "identifier",
      startPosition: { row: 9, column: 18 },
      endPosition: { row: 9, column: 21 },
      startIndex: 255,
      endIndex: 258,
      text: "arr",
    },
    node_49: {
      id: "node_49",
      type: "binary_expression",
      startPosition: { row: 9, column: 23 },
      endPosition: { row: 9, column: 30 },
      startIndex: 260,
      endIndex: 267,
      text: "mid + 1",
    },
    node_50: {
      id: "node_50",
      type: "identifier",
      startPosition: { row: 9, column: 23 },
      endPosition: { row: 9, column: 26 },
      startIndex: 260,
      endIndex: 263,
      text: "mid",
    },
    node_51: {
      id: "node_51",
      type: "number_literal",
      startPosition: { row: 9, column: 29 },
      endPosition: { row: 9, column: 30 },
      startIndex: 266,
      endIndex: 267,
      text: "1",
    },
    node_52: {
      id: "node_52",
      type: "identifier",
      startPosition: { row: 9, column: 32 },
      endPosition: { row: 9, column: 37 },
      startIndex: 269,
      endIndex: 274,
      text: "right",
    },
    node_53: {
      id: "node_53",
      type: "comment",
      startPosition: { row: 11, column: 8 },
      endPosition: { row: 11, column: 34 },
      startIndex: 286,
      endIndex: 312,
      text: "// Merge the sorted halves",
    },
    node_54: {
      id: "node_54",
      type: "expression_statement",
      startPosition: { row: 12, column: 8 },
      endPosition: { row: 12, column: 37 },
      startIndex: 321,
      endIndex: 350,
      text: "merge(arr, left, mid, right);",
    },
    node_55: {
      id: "node_55",
      type: "call_expression",
      startPosition: { row: 12, column: 8 },
      endPosition: { row: 12, column: 36 },
      startIndex: 321,
      endIndex: 349,
      text: "merge(arr, left, mid, right)",
    },
    node_56: {
      id: "node_56",
      type: "identifier",
      startPosition: { row: 12, column: 8 },
      endPosition: { row: 12, column: 13 },
      startIndex: 321,
      endIndex: 326,
      text: "merge",
    },
    node_57: {
      id: "node_57",
      type: "argument_list",
      startPosition: { row: 12, column: 13 },
      endPosition: { row: 12, column: 36 },
      startIndex: 326,
      endIndex: 349,
      text: "(arr, left, mid, right)",
    },
    node_58: {
      id: "node_58",
      type: "identifier",
      startPosition: { row: 12, column: 14 },
      endPosition: { row: 12, column: 17 },
      startIndex: 327,
      endIndex: 330,
      text: "arr",
    },
    node_59: {
      id: "node_59",
      type: "identifier",
      startPosition: { row: 12, column: 19 },
      endPosition: { row: 12, column: 23 },
      startIndex: 332,
      endIndex: 336,
      text: "left",
    },
    node_60: {
      id: "node_60",
      type: "identifier",
      startPosition: { row: 12, column: 25 },
      endPosition: { row: 12, column: 28 },
      startIndex: 338,
      endIndex: 341,
      text: "mid",
    },
    node_61: {
      id: "node_61",
      type: "identifier",
      startPosition: { row: 12, column: 30 },
      endPosition: { row: 12, column: 35 },
      startIndex: 343,
      endIndex: 348,
      text: "right",
    },
  },
};
